# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
# The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

def generate_triangle_numbers():
    i = 1
    while True:
        yield int(i*(i+1)/2)
        i += 1
 
def get_factors(num):
    count = 0
    # list_factors = []
    times = int(num**0.5) + 1
    for k in range(1, times):
        if num % k == 0:
            # list_factors.extend([k, num//k])
            count += 2
    # list_factors.sort()
    return count

def over_to_factors(n):
    for k in generate_triangle_numbers():
        if get_factors(k) > n:
            print(k)
            break


if __name__ == '__main__':

    over_to_factors(500)
