import math
"""
Problem 2:

Each new term in the Fibonacci sequence is generated by adding
the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence
whose values do not exceed four million, find the sum of the even-valued terms.

"""
# solving problem 2
def fibonacci():
    a, b = 1, 2
    for k in range(20):
        yield a , b
        a = a + b
        b = a + b

def function_next():
    for i in fibonacci():
        for j in i:
            yield j

def result_sum_fibonacci(arg):
    sum = 0
    print("Even fibonacci numbers:")
    for i in function_next():
        if i%2 == 0 and i<arg:
            print(i)
            sum += i
    print("The sum: {}".format(sum))

"""
problem 3:

"""








"""
Problem 4: 
A palindromic number reads the same both ways.
The largest palindrome made from the product of two 2-digit numbers
is 9009 = 91 × 99.
Find the largest palindrome made from the product of two 3-digit numbers.
"""

def largest_palindrome_product(number_of_digits):
    
    nod = number_of_digits
    if nod == 1:
        print('')
    elif nod == 2:
        for i in range(10, 99+1):
            for j in range(10, 99+1):
                if is_palindrome_number(i*j):
                    yield i*j
    elif nod == 3:
        for i in range(100, 999+1):
            for j in range(100, 999+1):
                if is_palindrome_number(i*j):
                    yield i*j
    elif nod <=0 or nod >3:
        print('Don\'t available')

def is_palindrome_number(number):
    if natural_number(number) == reversed_natural_number(number):
        return True
    else:
        return False
        

def reversed_natural_number(number):
    ln = []
    while number>0:
        r = number%10
        ln.append(r)
        number = number//10
    return ln

def natural_number(number):
    ln = []
    for i in reversed(reversed_natural_number(number)):
        ln.append(i)
    return ln
"""
"""

def smallest_number(to_number):
    tn = to_number
    max= 1
    for k in range(2, tn +1):
        max *= k
    
    print(max)
    min = max
    for t in range(max, 20, -1):
        if divisible_by(t):
            min = t
            print(min)

def divisible_by(n):
    for k in range(1, 20 +1):
        if n%k !=0:
            return False
    return True
            
"""
problem 6:
The sum of the squares of the first ten natural numbers is,
1^2+2^2+...+10^2 = 385
The square of the sum of the first ten natural numbers is,
(1+2+...+10)^2=55^2 = 3025
Hence the difference between the sum of the squares
of the first ten natural numbers and the square of the sum is 3025−385=2640.
Find the difference between the sum of the squares of
the first one hundred natural numbers and the square of the sum.

"""                
def difference_of_square(to_number):
    tn = to_number
    sigma = square_of_the_sum(tn)-sum_of_the_squares(tn)
    print('{} - {} = {}'.format(square_of_the_sum(tn),sum_of_the_squares(tn),
                                  sigma))

def sum_of_the_squares(number, sum_square = 0):
    sq = sum_square
    for k in range(1, number+1):
        sq += k**2
    return sq

def square_of_the_sum(number, result_sum = 0):
    rs = result_sum
    for k in range(1, number+1):
        rs += k
    return rs**2

"""
problem 7: 
By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13,
we can see that the 6th prime is 13.
What is the 10 001st prime number?

"""
def prime_numbers(to_number):
    tn = to_number
    for possible_prime in range(2, tn+1):
        is_prime = True
        for num in range(2, possible_prime):
            if possible_prime % num == 0:
                is_prime = False
        
        if is_prime:
            yield possible_prime

def the_prime_number_in(position, count = 1):
    c = count
    for i in prime_numbers(900000000):
        print('in position = {} -> value of prime number = {}'.format(c, i))
        if c == position:
            print('Finished process')
            break
        c += 1

"""
problem 9:
A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
a^2 + b^2 = c^2
For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.

There exists exactly one Pythagorean triplet for which a + b + c = 1000.
Find the product abc.
"""
def pythagorean_tripet(big_number):
    for a in range(1,big_number+1):
        for b in range(1, a+1):
            c = math.sqrt(a**2 + b**2)
            sc = a + b + c
            if sc == 1000:
                p = a*b*c
                print('a = {}, b = {}, c = {}\nsum = {}, product = {}'.format(a,
                                                                              b,
                                                                              c,
                                                                              sc,
                                                                              p))
                break

"""
problem 10:
The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
Find the sum of all the primes below two million.
"""
def prime_number(possible_prime = 2):
    while True:
        is_prime = True
        for num in range(2, possible_prime):
            if possible_prime % num == 0:
                is_prime = False
        if is_prime:
            yield possible_prime
        possible_prime += 1
            
def sum_prime_number(below_of):
    primes = prime_number()
    prime = next(primes)
    while prime < below_of:
        print(prime)
        yield prime
        prime = next(primes)



"""
oroblem 17:
If the numbers 1 to 5 are written out in words: 
one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters 
used in total.

If all the numbers from 1 to 1000 (one thousand) inclusive were written out
 in words, how many letters would be used?

NOTE: Do not count spaces or hyphens. For example, 
342 (three hundred and forty-two) contains 23 letters and 
115 (one hundred and fifteen) contains 20 letters. 
The use of "and" when writing out numbers is in compliance with British usage.
"""
def once(num):
    word = ''
    if num == '1':
        word = "One"
    if num == '2':
        word = "Two"
    if num == '3':
        word = "Three"
    if num == '4':
        word = "Four"
    if num == '5':
        word = "Five"
    if num == '6':
        word = "Six"
    if num == '7':
        word = "Seven"
    if num == '8':
        word = "Eight"
    if num == '9':
        word = "Nine"
    word = word.strip()
    return word

def ten(num):
    word = ''
    if num[0] == '1':
        if num[1] == '0':
            word = "Ten"
        if num[1] == '1':
            word = "Eleven"
        if num[1] == '2':
            word = "Twelve"
        if num[1] == '3':
            word = "Thirteen"
        if num[1] == '4':
            word = "Fourteen"
        if num[1] == '5':
            word = "Fifteen"
        if num[1] == '6':
            word = "Sixteen"
        if num[1] == '7':
            word = "Seventeen"
        if num[1] == '8':
            word = "Eighteen"
        if num[1] == '9':
            word = "Nineteen"
    else:
        text = once(num[1])
        if num[0] == '2':
            word = "Twenty"
        if num[0] == '3':
            word = "Thirty"
        if num[0] == '4':
            word = "Forty"
        if num[0] == '5':
            word = "Fifty"
        if num[0] == '6':
            word = "Sixty"
        if num[0] == '7':
            word = "Seventy"
        if num[0] == '8':
            word = "Eighty"
        if num[0] == '9':
            word = "Ninety"
        word = word + "" + text
    word = word.strip()
    return word

def hundred(num):
    word = ''
    text = ten(num[1:])
    if num[0] == '1':
        word = "One"
    if num[0] == '2':
        word = "Two"
    if num[0] == '3':
        word = "Three"
    if num[0] == '4':
        word = "Four"
    if num[0] == '5':
        word = "Five"
    if num[0] == '6':
        word = "Six"
    if num[0] == '7':
        word = "Seven"
    if num[0] == '8':
        word = "Eight"
    if num[0] == '9':
        word = "Nine"
    if num[0] != '0':
        word = word + "Hundredand"
    word = word + text
    word = word.strip()
    return word

def thousand(num):
    word = ''
    pref = ''
    text = ''
    length = len(num)
    if length == 6:
        text = hundred(num[3:])
        pref = hundred(num[:3])
    if length == 5:
        text = hundred(num[2:])
        pref = ten(num[:2])
    if length == 4:
        text = hundred(num[1:])
        if num[0] == '1':
            word = "One"
        if num[0] == '2':
            word = "Two"
        if num[0] == '3':
            word = "Three"
        if num[0] == '4':
            word = "Four"
        if num[0] == '5':
            word = "Five"
        if num[0] == '6':
            word = "Six"
        if num[0] == '7':
            word = "Seven"
        if num[0] == '8':
            word = "Eight"
        if num[0] == '9':
            word = "Nine"
        word = word + "Thousand"
    word = word + text
    if length == 6 or length == 5:
        word = pref + "Thousand" + word
    word = word.strip()
    return word

def million(num):
    word = ''
    pref = ''
    text = ''
    length = len(num)
    if length == 9:
        text = thousand(num[3:])
        pref = hundred(num[:3])
    if length == 8:
        text = thousand(num[2:])
        pref = ten(num[:2])
    if length == 7:
        text = thousand(num[1:])
        if num[0] == '1':
            word = "One"
        if num[0] == '2':
            word = "Two"
        if num[0] == '3':
            word = "Three"
        if num[0] == '4':
            word = "Four"
        if num[0] == '5':
            word = "Five"
        if num[0] == '6':
            word = "Six"
        if num[0] == '7':
            word = "Seven"
        if num[0] == '8':
            word = "Eight"
        if num[0] == '9':
            word = "Nine"
        word = word + "Million"
    word = word + text
    if length == 9 or length == 8:
        word = pref + "Million" + word
    word = word.strip()
    return word

def billion(num):
    word = ''
    pref = ''
    text = ''
    length = len(num)
    if length == 12:
        text = million(num[3:])
        pref = hundred(num[:3])
    if length == 11:
        text = million(num[2:])
        pref = ten(num[:2])
    if length == 10:
        text = million(num[1:])
        if num[0] == '1':
            word = "One"
        if num[0] == '2':
            word = "Two"
        if num[0] == '3':
            word = "Three"
        if num[0] == '4':
            word = "Four"
        if num[0] == '5':
            word = "Five"
        if num[0] == '6':
            word = "Six"
        if num[0] == '7':
            word = "Seven"
        if num[0] == '8':
            word = "Eight"
        if num[0] == '9':
            word = "Nine"
        word = word + "Billion"
    word = word + text
    if length == 12 or length == 11:
        word = pref + "Billion" + word
    word = word.strip()
    return word


#104382426112 One Hundred Four Billion Three Hundred Eighty Two Million Four Hundred Twenty Six Thousand One HUndred Twelve
def to_letter(test):
    a = str(test)
    leng = len(a)
    if leng == 1:
        num = once(a)
    if leng == 2:
        num = ten(a)
    if leng == 3:
        num = hundred(a)
    if leng > 3 and leng < 7:
        num = thousand(a)
    if leng > 6 and leng < 10:
        num = million(a)
    if leng > 9 and leng < 13:
        num = billion(a)
    return num


def to_convert(initial, final):
    s = 0
    for k in range(initial, final+1):
        print(to_letter(k), len(to_letter(k)))
        s += len(to_letter(k))
    return s

"""
problem 25:
The Fibonacci sequence is defined by the recurrence relation:

Fn = Fn−1 + Fn−2, where F1 = 1 and F2 = 1.
Hence the first 12 terms will be:

F1 = 1
F2 = 1
F3 = 2
F4 = 3
F5 = 5
F6 = 8
F7 = 13
F8 = 21
F9 = 34
F10 = 55
F11 = 89
F12 = 144
The 12th term, F12, is the first term to contain three digits.
What is the index of the first term in the Fibonacci sequence
 to contain 1000 digits?
    
"""
def fibonacci_generate():
    a , b = 1, 1
    while True:
        yield a, b
        a = a+b
        b = a+b
        
        
def fibo_next():
    for i in fibonacci_generate():
        for j in i:
            yield j 

def fibo_generate_to():
    # tn = to_number
    c = 0
    for k in fibo_next():
        c += 1
        yield c, k
        #if c == tn:
         #   break
   

def digit_number(n):
    digits = []
    while n>0:
        r = n%10
        n = n//10
        digits.append(r)
    return len(digits)


def only_with_digit(n_digits, amount): 
    count = 0
    for k in fibo_generate_to():
        if digit_number(k[1]) == n_digits:
            count += 1
            print(k)
            if count == amount:
                break



"""
next problem
"""
l = [[3], 
     [7, 4],
     [2, 4, 6],
     [8, 5, 9, 3],
    ]

s = 0
for k in l:
    s += max(k)
print(s)
 
# RUN
# problem 2:
# result_sum_fibonacci(4000000)

# problem 3:
#
# problem 4:
# largest_palindrome_product(2)
# print(natural_number(1234))
# print(reversed_natural_number(1234))
# print(is_palindrome_number(90459))
# print(max(list(largest_palindrome_product(3))))

# problem 5:
# don't finished
# smallest_number(20)

# problem 6:
# difference_of_square(100)

# problem 7:
# the_prime_number_in(10001)

# problem 8:
# 

# problem 9:
# pythagorean_tripet(1000)

# problem 10:
"""
Note:
no pertenece a ninguna variable por lo tanto
los dos print() imprimiran lo mismo
print(next(prime_number())) # 2
print(next(prime_number())) # 2

solo pertenece a la pariable 'p'
p = prime_number()
print(next(p)) # 2
print(next(p)) # 3
print(next(p)) # 5
print()
solo pertenece a la pariable 's'
s = prime_number()
print(next(s)) # 2
print(next(s)) # 3
print(next(s)) # 5
print(next(s)) # 7
print(next(s)) # 11
print(next(s)) # 13
print(next(s)) # 17        
print(next(s)) # 19
print(next(s)) # 23
""" 
#print(sum(sum_prime_number(2000000)))

# problem 17
# print(to_convert(1, 1000))

# problem 25
# only_with_digit(1000, 2)

    
        
