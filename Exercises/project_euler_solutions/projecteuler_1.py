# I'm going to solve a series of excercises from the website called 'projecteuler.net'
import math

#from js2py.base import xrange


def exercise1():
    """
        If we list all the natural numbers
        below 10 that are multiples of 3 or 5,
        we get 3, 5, 6 and 9. The sum of these multiples is 23.
        Find the sum of all the multiples of 3 or 5 below 1000.
    """
    m = int(input("type a number:"))
    multiplies = []
    for k in range(m):
        if k % 3 == 0 or k % 5 == 0:
            print(k)
            multiplies.append(k)
    print("the sum of this multiplies of 3 or 5 is: ", math.fsum(multiplies))

    # ---------------------------------------------------------------------------


def exercise2(n):
    """
        n! means n × (n − 1) × ... × 3 × 2 × 1

        For example, 10! = 10 × 9 × ... × 3 × 2 × 1 = 3628800,
        and the sum of the digits in the number 10! is
        3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.
        
        Find the sum of the digits in the number 100!
    """
    # n = int(input("type a number for compute its fatorial and the sum of digits: "))
    factorial = math.factorial(n)
    print("factorial from {}!: {}".format(n, factorial))
    factorialstr = str(factorial)
    for k in factorialstr:
        yield int(k)

def run_exercise2(arg):
    sum = 0
    for i in exercise2(arg):
        # print(i)
        sum +=i
    print("the sum of digits: {}".format(sum))

# ---------------------------------------------------------------------------------  

    """
        Triangle, pentagonal, and hexagonal numbers are generated by
        the following formulae:

        Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
        Pentagonal	 	Pn=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
        Hexagonal	 	Hn=n(2n−1)	 	1, 6, 15, 28, 45, ...
        It can be verified that T285 = P165 = H143 = 40755.

        Find the next triangle number that is also pentagonal and hexagonal.
    """
def exercise3():
    c = int(input("type the amount: "))
    
    for i in triangle_loop(c):
        #print(i)
    
        for j in pentagonal_loop(c):
            #print(j)
            
            for k in hexagonal_loop(c):
                #print(k)
                if i == j and i == k:
                    print(k)
    # listnum = []
    """

    for n in range(2, count + 1):
        T = n * (n + 1) / 2
        for m in range(2, count):
            P = m * (3 * m - 1) / 2
            for l in range(2, count):
                H = l * (2 * l - 1)
                if T == P and T == H:
                    # listnum.append(T)
                    yield T
                
    counter = 1
    n = 1
    m = 1
    l = 1
    while True:
        T = n * (n + 1) / 2
        P = m * (3 * m - 1) / 2
        H = l * (2 * l - 1)
        if T == P and T == H:
            yield T
            counter = counter + 1
            if counter == 2:
                break
            
        n = n + 1
        m = m + 1
        l = l + 1
    """
    
    # print("the numbers that are triangle, pentagonal and hexagonal")
    # print(listnum, sep=",")
def triangle_loop(count):
    for n in range(1, count+1):
        T = n * (n + 1) / 2
        yield T

def pentagonal_loop(count):
    for m in range(1, count+1):
        P = m * (3 * m - 1) / 2
        yield P

def hexagonal_loop(count):
    for l in range(1, count+1):
        H = l * (2 * l - 1)
        yield H
            
    

# exercise number 4
# --------------------------------------------------------------------------------------
def f(n, m):
    i = 0
    n_i = 0
    while True:
        L = sumDigit(i)
        if L == n:
            n_i = n_i + 1
            if n_i == m:
                return i
        i = i + 1


def sumDigit(value):
    s = 0
    nstr = str(value)
    for j in range(len(nstr)):
        s = s + int(nstr[j])
    return s


def s(k):
    lst = []
    for n in range(1, k + 1):
        v = f(math.pow(n, 3), math.pow(n, 4))
        lst.append(v)
    absum = math.fsum(lst)
    print(absum)


def stwo(k):
    absum = 0
    for n in range(1, k + 1):
        v = f(math.pow(n, 3), math.pow(n, 4))
        absum = absum + v
    print(absum % 1000000007)


# -----------------------------------------------------------------
def binarySeries():
    pass
    





# RUN
# exercise1()
# run_exercise2(100)
exercise3()
# exercise4
# print(f(10, 100))
print("-" * 30)
# s(10)
# stwo(3)
